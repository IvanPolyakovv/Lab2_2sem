
#include <iostream>
#include <chrono>
using namespace std;
using namespace chrono;
struct Node
{
    int data;
    Node* prev;
    Node* next;
};

Node* createNode(int data)
{
    Node* newNode = new Node;
    newNode->data = data;
    newNode->prev = nullptr;
    newNode->next = nullptr;
    return newNode;
}

void printDoublyLinkedList(Node* head)
{
    Node* current = head;

    while (current != nullptr)
    {
        cout << current->data << " ";
        current = current->next;
    }

    cout << endl;
}

void insertNode(Node** head, int data, int position)
{
    Node* newNode = new Node();
    newNode->data = data;

    if (position == 0)
    {
        newNode->next = *head;
        newNode->prev = nullptr;
        if (*head != nullptr)
        {
            (*head)->prev = newNode;
        }
        *head = newNode;
    }
    else {
        Node* current = *head;
        for (int i = 0; i < position - 1 && current != nullptr; i++) {
            current = current->next;
        }

        if (current == nullptr) {
            cout << "Invalid position" << endl;
            return;
        }

        newNode->next = current->next;
        newNode->prev = current;
        if (current->next != nullptr) {
            current->next->prev = newNode;
        }
        current->next = newNode;
    }
}

void insertElement(int*& array, int& size, int index, int value) 
{
    int* newArray = new int[size + 1];

    for (int i = 0; i < index; i++) 
    {
        newArray[i] = array[i];
    }

    newArray[index] = value;

    for (int i = index + 1; i < size + 1; i++) 
    {
        newArray[i] = array[i - 1];
    }

    delete[] array;
    array = newArray;
    size++;
    for (int i = 0; i < size; i++)
    {
        cout << array[i] << ' ';
    }
    cout << endl;
}


Node* createDoublyLinkedList(int& size)
{
    Node* head = nullptr;
    Node* prevNode = nullptr;
    char choice;
    cout << "1 - Initialize automatically, 2 - Initialize by user: ";
    cin >> choice;
    switch (choice)
    {
    case '1':
    {
        cout << "Enter the size: ";
        cin >> size;
        for (int i = 0; i < size; i++)
        {
            int value = rand() % 100;
            Node* newNode = createNode(value);
            if (head == nullptr)
            {
                head = newNode;
                prevNode = head;
            }
            else
            {
                prevNode->next = newNode;
                newNode->prev = prevNode;
                prevNode = newNode;
            }
        }
        return head;
    }
    break;
    case '2':

    {
        size = 1;
        int value;
        cout << "Enter the value: ";
        cin >> value;
        Node* newNode = createNode(value);
        bool end = true;
        do
        {
            int value;
            cout << "Enter the value: ";
            cin >> value;
            insertNode(&head, value, size - 1);
            cout << "Continue? 1 - Yes, 0 - No: ";
            cin >> end;
        } while (end == true);
        return head;
    }
    break;
    default:
        return head;
    }
}

void createArray(Node*& head, int* arr, int size)
{
    Node* current = head;
    for (int i = 0; i < size; i++)
    {
        if (current != nullptr)
        {
            arr[i] = current->data;
            current = current->next;
        }
    }
    cout << "Array: ";
    for (int i = 0; i < size; i++)
    {
        cout << arr[i] << ' ';
    }
    cout << endl;
}

void deleteNode(Node** head, int index)
{
    if (*head == nullptr)
    {
        cout << "The list is empty!" << std::endl;
        return;
    }

    Node* current = *head;

    if (index == 0)
    {
        *head = current->next;
        if (*head != nullptr)
        {
            (*head)->prev = nullptr;
        }
        delete current;
        return;
    }

    for (int i = 0; current != nullptr && i < index; ++i)
    {
        current = current->next;
    }

    if (current == nullptr)
    {
        cout << "Invalid index!" << endl;
        return;
    }

    if (current->prev != nullptr)
    {
        current->prev->next = current->next;
    }

    if (current->next != nullptr)
    {
        current->next->prev = current->prev;
    }

    delete current;
}

void deleteElement(int*& array, int& size, int index) 
{
    int* newArray = new int[size - 1];

    for (int i = 0; i < index; i++) 
    {
        newArray[i] = array[i];
    }

    for (int i = index; i < size - 1; i++) 
    {
        newArray[i] = array[i + 1];
    }

    delete[] array;
    array = newArray;
    size--;

    cout << "Array: ";
    for (int i = 0; i < size; i++)
    {
        cout << array[i] << ' ';
    }
    cout << endl;
}

void swapNodes(Node*& head, int index1, int index2)
{
    if (index1 == index2)
    {
        return;
    }

    Node* current = head;
    Node* node1 = nullptr, * node2 = nullptr;
    int pos = 0;

    while (current != nullptr)
    {
        if (pos == index1)
        {
            node1 = current;
        }
        if (pos == index2)
        {
            node2 = current;
        }

        current = current->next;
        pos++;
    }
    if (node1 == nullptr || node2 == nullptr) {
        std::cout << "Invalid indexes.\n";
        return;
    }

    int temp = node1->data;
    node1->data = node2->data;
    node2->data = temp;
}

void swapElements(int* array, int index1, int index2) 
{
    int temp = array[index1];
    array[index1] = array[index2];
    array[index2] = temp;

}


int getValueAtIndex(Node*& head, int index) {
    Node* current = head;
    int i = 0;
    while (current != nullptr && i < index) {
        current = current->next;
        i++;
    }
    if (current == nullptr) {
        std::cout << "Index out of bounds." << std::endl;
        return -1;
    }
    return current->data;
}

int getElementAtIndex(int* array, int index) 
{
    return array[index];
}

void findIndexes(Node* head, int value) {
    int index = 0;
    Node* current = head;

    while (current != nullptr) {
        if (current->data == value) {
            std::cout << "Index of " << value << ": " << index + 1 << std::endl;
        }

        index++;
        current = current->next;
    }
}

void getIndexByValue(int* array, int size, int value) 
{
    for (int i = 0; i < size; i++) 
    {
        if (array[i] == value) 
        {
            cout << "Index of " << value << ": " << i + 1 << std::endl;
            return;
        }
    }

    std::cout << "Value " << value << " not found in the array" << std::endl;
}

void bubbleSortNode(Node* head) {
    int swapped;
    Node* ptr1;
    Node* lptr = nullptr;

    if (head == nullptr)
        return;

    do {
        swapped = 0;
        ptr1 = head;

        while (ptr1->next != lptr) {
            if (ptr1->data > ptr1->next->data) {
                int temp = ptr1->data;
                ptr1->data = ptr1->next->data;
                ptr1->next->data = temp;
                swapped = 1;
            }
            ptr1 = ptr1->next;
        }
        lptr = ptr1;
    } while (swapped);
    cout << "List: ";
    printDoublyLinkedList(head);
}

void bubbleSortArray(int* arr, int size) 
{
    for (int i = 0; i < size - 1; i++) 
    {
        for (int j = 0; j < size - i - 1; j++) 
        {
            if (arr[j] > arr[j + 1]) 
            {
                int temp = arr[j];
                arr[j] = arr[j + 1];
                arr[j + 1] = temp;
            }
        }
    }
    for (int i = 0; i < size; i++)
    {
        cout << arr[i] << ' ';
    }
    cout << endl;
}

int main() {
    time_point<steady_clock, duration<__int64, ratio<1, 1000000000>>> start, end;
    nanoseconds result;
    int size;
    

    start = steady_clock::now();
    cout << endl;
    Node* head = createDoublyLinkedList(size);
    end = steady_clock::now();
    cout << "Doubly Linked List: ";
    printDoublyLinkedList(head);
    result = duration_cast<nanoseconds>(end - start);
    cout << "Time of creating the list: " << result.count() << " ns" << endl;
    int* arr = new int[size];
    start = steady_clock::now();
    cout << endl;
    int sizeArr = size;
    createArray(head, arr, sizeArr);
    result = duration_cast<nanoseconds>(end - start);
    cout << "Time of creating the array: " << result.count() * (-1) << " ns" << endl;

    char choice;
    do {
        cout << "1. Insert element\n" << "2. Delete element\n" << "3. Swap elements\n" << "4. Get value at index\n" << "5. Get indexes at value\n" << "6. Bubble Sort (idz 1)\n" << "e. Exit.\n";
        cout << "Enter your choice: ";
        cin >> choice;
        switch (choice)
        {
        case '1':
        {

            //insert in list
            int position;
            cout << "Position: ";
            cin >> position;
            int value;
            cout << "Value: ";
            cin >> value;
            start = steady_clock::now();
            cout << endl;
            insertNode(&head, value, position - 1);
            end = steady_clock::now();
            cout << "Doubly Linked List: ";
            printDoublyLinkedList(head);
            result = duration_cast<nanoseconds>(end - start);
            cout << "Time of insert: " << result.count() << " ns" << endl;
            //+

            start = steady_clock::now();
            cout << endl;
            insertElement(arr, sizeArr, position - 1, value);
            end = steady_clock::now();
            result = duration_cast<nanoseconds>(end - start);
            cout << "Time of insert: " << result.count() << " ns" << endl;
        }
            break;
        case '2':
        {
            //delete in list
            int position;
            cout << "Position: ";
            cin >> position;
            start = steady_clock::now();
            cout << endl;
            deleteNode(&head, position - 1);
            end = steady_clock::now();
            cout << "Doubly Linked List: ";
            printDoublyLinkedList(head);
            result = duration_cast<nanoseconds>(end - start);
            cout << "Time of delete: " << result.count() << " ns" << endl;
            //+

            //delete in array
            start = steady_clock::now();
            cout << endl;
            deleteElement(arr, sizeArr, position - 1);
            end = steady_clock::now();
            result = duration_cast<nanoseconds>(end - start);
            cout << "Time of delete: " << result.count() << " ns" << endl;
        }
            break;
        case '3':
            //swap in list
            int position1, position2;
            cout << "Position 1: ";
            cin >> position1;
            cout << "Position 2: ";
            cin >> position2;
            start = steady_clock::now();
            cout << endl;
            swapNodes(head, position1 - 1, position2 - 1);
            end = steady_clock::now();
            printDoublyLinkedList(head);
            result = duration_cast<nanoseconds>(end - start);
            cout << "Time of swap: " << result.count() << " ns" << endl;
            //+

            //swap in array
            start = steady_clock::now();
            cout << endl;
            swapElements(arr, position1 - 1, position2 - 1);
            end = steady_clock::now();
            cout << "Array: ";
            for (int i = 0; i < size; i++)
            {
                cout << arr[i] << ' ';
            }
            cout << endl;
            result = duration_cast<nanoseconds>(end - start);
            cout << "Time of swap: " << result.count() << " ns" << endl;
            break;
        case '4':
            //get value at index
            int position;
            cout << "Position: ";
            cin >> position;
            start = steady_clock::now();
            cout << endl;
            int value;
            value = getValueAtIndex(head, position - 1);
            cout << "Value: " << value << endl;
            end = steady_clock::now();
            result = duration_cast<nanoseconds>(end - start);
            cout << "Time: " << result.count() << " ns" << endl;
            //+

            //get value at index arr
            start = steady_clock::now();
            cout << endl;
            value = getElementAtIndex(arr, position - 1);
            end = steady_clock::now();
            cout << "Value: " << value << endl;
            result = duration_cast<nanoseconds>(end - start);
            cout << "Time: " << result.count() << " ns" << endl;
            break;
        case '5':
            //get index at value
            cout << "Value: ";
            cin >> value;
            start = steady_clock::now();
            cout << endl;
            findIndexes(head, value);
            end = steady_clock::now();
            result = duration_cast<nanoseconds>(end - start);
            cout << "Time: " << result.count() << " ns" << endl;
            //+

            //get index at value arr
            start = steady_clock::now();
            cout << endl;
            getIndexByValue(arr, sizeArr, value);
            end = steady_clock::now();
            result = duration_cast<nanoseconds>(end - start);
            cout << "Time: " << result.count() << " ns" << endl;
            break;
        case '6':
        {
            start = steady_clock::now();
            cout << endl;
            bubbleSortNode(head);
            end = steady_clock::now();
            result = duration_cast<nanoseconds>(end - start);
            cout << "Time of sort: " << result.count() << " ns" << endl;
            //+

            //delete in array
            start = steady_clock::now();
            cout << endl;
            bubbleSortArray(arr, sizeArr);
            end = steady_clock::now();
            result = duration_cast<nanoseconds>(end - start);
            cout << "Time of sort: " << result.count() << " ns" << endl;
        }
            break;
        case 'e':
            return 0;
            break;
        default:
            return -1;
        }
    } while (choice != 'e');
    delete[] arr;
    return 0;
}
