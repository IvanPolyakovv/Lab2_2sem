#include <iostream>
#include <chrono>
using namespace std;
using namespace chrono;
struct Node 
{
    int data;
    Node* prev;
    Node* next;
};

Node* createNode(int data) 
{
    Node* newNode = new Node;
    newNode->data = data;
    newNode->prev = nullptr;
    newNode->next = nullptr;
    return newNode;
}

void printDoublyLinkedList(Node* head) 
{
    Node* current = head;

    while (current != nullptr) 
    {
        cout << current->data << " ";
        current = current->next;
    }

    cout << std::endl;
}

void insertNode(Node** head, int data, int position) 
{
    Node* newNode = new Node();
    newNode->data = data;

    if (position == 0) 
    {
        newNode->next = *head;
        newNode->prev = nullptr;
        if (*head != nullptr) 
        {
            (*head)->prev = newNode;
        }
        *head = newNode;
    }
    else {
        Node* current = *head;
        for (int i = 0; i < position - 1 && current != nullptr; i++) {
            current = current->next;
        }

        if (current == nullptr) {
            cout << "Invalid position" << endl;
            return;
        }

        newNode->next = current->next;
        newNode->prev = current;
        if (current->next != nullptr) {
            current->next->prev = newNode;
        }
        current->next = newNode;
    }
}

void printArray(int* arr, int size)
{
    cout << "Array: ";
    for (int i = 0; i < size; i++)
    {
        cout << arr[i] << ' ';
    }
    cout << endl;
}

void initializeArrayFromList(Node* head, int* arr, int size) 
{
    Node* current = head;
    int i = 0;
    while (current != nullptr && i < size) {
        arr[i] = current->data;
        current = current->next;
        i++;
    }
}

Node* createDoublyLinkedList() 
{
    Node* head = nullptr;
    Node* prevNode = nullptr;
    char choice;
    cout << "1 - Initialize automatically, 2 - Initialize by user";
    cin >> choice;
    switch (choice)
    {
    case '1':
    {
        int size;
        cout << "Enter the size: ";
        cin >> size;
        for (int i = 0; i < size; i++)
        {
            int value = rand() % 100;
            Node* newNode = createNode(value);
            if (head == nullptr)
            {
                head = newNode;
                prevNode = head;
            }
            else
            {
                prevNode->next = newNode;
                newNode->prev = prevNode;
                prevNode = newNode;
            }
        }
        printDoublyLinkedList(head);
        return head;
    }
        break;
    case '2':
        
    {
        int size = 1;
        int* arr = new int[size];
        cout << "Enter the value: ";
        cin >> arr[0];
        Node* newNode = createNode(arr[0]);
        bool end = true;
        int i = 1;
        do
        {
            int value;
            cout << "Enter the value: ";
            cin >> value;
            insertNode(&head, value, size - 1);
            cout << "Continue? 1 - Yes, 0 - No: ";
            cin >> end;
            i++;
        } while (end == true);
        printDoublyLinkedList(head);
        printArray(arr, size);
        return head;
    }
        break;
    default:
        return head;
    }
}



//void insertElement(int* arr, int& size, int index, int value) 
// {
//    int* newArr = new int[size + 1];
//
//    for (int i = 0; i < index; i++) 
//    {
//        newArr[i] = arr[i];
//    }
//
//    newArr[index] = value;
//
//    for (int i = index; i < size; i++) 
//    {
//        newArr[i + 1] = arr[i];
//    }
//
//    delete[] arr;
//    size++;
//    arr = newArr;
//    cout << "Dynamic Array: ";
//    for (int i = 0; i < size; i++)
//    {
//        cout << newArr[i] << ' ';
//    }
//    cout << endl;
//    delete[] arr;
//}

void deleteNode(Node** head, int index) 
{
    if (*head == nullptr) 
    {
        cout << "The list is empty!" << std::endl;
        return;
    }

    Node* current = *head;

    if (index == 0) 
    {
        *head = current->next;
        if (*head != nullptr) 
        {
            (*head)->prev = nullptr;
        }
        delete current;
        return;
    }

    for (int i = 0; current != nullptr && i < index; ++i) 
    {
        current = current->next;
    }

    if (current == nullptr) 
    {
        cout << "Invalid index!" << endl;
        return;
    }

    if (current->prev != nullptr)
    {
        current->prev->next = current->next;
    }

    if (current->next != nullptr) 
    {
        current->next->prev = current->prev;
    }

    delete current;
}

void swapNodes(Node*& head, int index1, int index2) 
{
    if (index1 == index2) 
    {
        return;
    }

    Node* current = head;
    Node* node1 = nullptr, *node2 = nullptr;
    int pos = 0;

    while (current != nullptr) 
    {
        if (pos == index1) 
        {
            node1 = current;
        }
        if (pos == index2) 
        {
            node2 = current;
        }

        current = current->next;
        pos++;
    }
    if (node1 == nullptr || node2 == nullptr) {
        std::cout << "Invalid indexes.\n";
        return;
    }

    int temp = node1->data;
    node1->data = node2->data;
    node2->data = temp;
}

int getValueAtIndex(Node*& head, int index) {
    Node* current = head;
    int i = 0;
    while (current != nullptr && i < index) {
        current = current->next;
        i++;
    }
    if (current == nullptr) {
        std::cout << "Index out of bounds." << std::endl;
        return -1;
    }
    return current->data;
}

void findIndexes(Node* head, int value) {
    int index = 0;
    Node* current = head;

    while (current != nullptr) {
        if (current->data == value) {
            std::cout << "Index of " << value << ": " << index + 1 << std::endl;
        }

        index++;
        current = current->next;
    }
}

int main() {
    time_point<steady_clock, duration<__int64, ratio<1, 1000000000>>> start, end;
    nanoseconds result;
    int size = 0;

    int* arr = new int[size];

    start = steady_clock::now();
    cout << endl;
    Node* head = createDoublyLinkedList();
    end = steady_clock::now();
    cout << "Doubly Linked List: ";
    printDoublyLinkedList(head);
    result = duration_cast<nanoseconds>(end - start);
    cout << "Time of creating the list: " << result.count() << " ns" << endl;

    char choice;
    do {
        cout << "1. Insert element\n" << "2. Delete element\n" << "3. Swap elements\n" << "4. Get value at index\n" << "5. Get indexes at value\n" << "e. Exit.\n";
        cout << "Enter your choice: ";
        cin >> choice;
        switch (choice)
        {
        case '1':
            //insert in list
            int position;
            cout << "Position: ";
            cin >> position;
            int value;
            cout << "Value: ";
            cin >> value;
            start = steady_clock::now();
            cout << endl;
            insertNode(&head, value, position - 1);
            end = steady_clock::now();
            cout << "Doubly Linked List: ";
            printDoublyLinkedList(head);
            result = duration_cast<nanoseconds>(end - start);
            cout << result.count() << endl;
            //+
            
            //insert in array
            /*start = steady_clock::now();
            cout << endl;
            insertElement(arr, size, position - 1, data);
            end = steady_clock::now();
            
            result = duration_cast<nanoseconds>(end - start);
            cout << result.count() << endl;*/
            break;
        case '2':
            //delete in list
            cout << "Position: ";
            cin >> position;
            start = steady_clock::now();
            cout << endl;
            deleteNode(&head, position - 1);
            end = steady_clock::now();
            cout << "Doubly Linked List: ";
            printDoublyLinkedList(head);
            result = duration_cast<nanoseconds>(end - start);
            cout << result.count() << endl;
            //+

            //delete in array

            break;
        case '3':
            //swap in list
            int position1, position2;
            cout << "Position 1: ";
            cin >> position1;
            cout << "Position 2: ";
            cin >> position2;
            start = steady_clock::now();
            cout << endl;
            swapNodes(head, position1 - 1, position2 - 1);
            end = steady_clock::now();
            printDoublyLinkedList(head);
            result = duration_cast<nanoseconds>(end - start);
            cout << result.count() << endl;
            //+

            //swap in array

            break;
        case '4':
            //get value at index
            cout << "Position: ";
            cin >> position;
            start = steady_clock::now();
            cout << endl;
            int index;
            index = getValueAtIndex(head, position - 1);
            cout << index << endl;
            end = steady_clock::now();
            result = duration_cast<nanoseconds>(end - start);
            cout << result.count() << endl;
            //+

            //get value at index arr

            break;
        case '5':
            //get index at value
            cout << "Value: ";
            cin >> value;
            start = steady_clock::now();
            cout << endl;
            findIndexes(head, value);
            end = steady_clock::now();
            result = duration_cast<nanoseconds>(end - start);
            cout << result.count() << endl;
            //+

            //get index at value arr
            break;
        case 'e':
            return 0;
            break;
        default:
            return -1;
        }
    } while (choice != 'e');
    return 0;
}
